#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataService.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="RunTrack")]
	public partial class DbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivity(Activity instance);
    partial void UpdateActivity(Activity instance);
    partial void DeleteActivity(Activity instance);
    partial void InsertAthlete(Athlete instance);
    partial void UpdateAthlete(Athlete instance);
    partial void DeleteAthlete(Athlete instance);
    partial void InsertAthleteHealth(AthleteHealth instance);
    partial void UpdateAthleteHealth(AthleteHealth instance);
    partial void DeleteAthleteHealth(AthleteHealth instance);
    partial void InsertGoal(Goal instance);
    partial void UpdateGoal(Goal instance);
    partial void DeleteGoal(Goal instance);
    partial void InsertLap(Lap instance);
    partial void UpdateLap(Lap instance);
    partial void DeleteLap(Lap instance);
    partial void InsertPreference(Preference instance);
    partial void UpdatePreference(Preference instance);
    partial void DeletePreference(Preference instance);
    partial void InsertRun(Run instance);
    partial void UpdateRun(Run instance);
    partial void DeleteRun(Run instance);
    partial void InsertShoe(Shoe instance);
    partial void UpdateShoe(Shoe instance);
    partial void DeleteShoe(Shoe instance);
    partial void InsertTrack(Track instance);
    partial void UpdateTrack(Track instance);
    partial void DeleteTrack(Track instance);
    partial void InsertTrackpoint(Trackpoint instance);
    partial void UpdateTrackpoint(Trackpoint instance);
    partial void DeleteTrackpoint(Trackpoint instance);
    partial void InsertTrainer(Trainer instance);
    partial void UpdateTrainer(Trainer instance);
    partial void DeleteTrainer(Trainer instance);
    partial void InsertTrainingPlan(TrainingPlan instance);
    partial void UpdateTrainingPlan(TrainingPlan instance);
    partial void DeleteTrainingPlan(TrainingPlan instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertWorkout(Workout instance);
    partial void UpdateWorkout(Workout instance);
    partial void DeleteWorkout(Workout instance);
    #endregion
		
		public DbDataContext() : 
				base(global::DataService.Properties.Settings.Default.RunTrackConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Activity> Activities
		{
			get
			{
				return this.GetTable<Activity>();
			}
		}
		
		public System.Data.Linq.Table<Athlete> Athletes
		{
			get
			{
				return this.GetTable<Athlete>();
			}
		}
		
		public System.Data.Linq.Table<AthleteHealth> AthleteHealths
		{
			get
			{
				return this.GetTable<AthleteHealth>();
			}
		}
		
		public System.Data.Linq.Table<Goal> Goals
		{
			get
			{
				return this.GetTable<Goal>();
			}
		}
		
		public System.Data.Linq.Table<Lap> Laps
		{
			get
			{
				return this.GetTable<Lap>();
			}
		}
		
		public System.Data.Linq.Table<Preference> Preferences
		{
			get
			{
				return this.GetTable<Preference>();
			}
		}
		
		public System.Data.Linq.Table<Run> Runs
		{
			get
			{
				return this.GetTable<Run>();
			}
		}
		
		public System.Data.Linq.Table<Shoe> Shoes
		{
			get
			{
				return this.GetTable<Shoe>();
			}
		}
		
		public System.Data.Linq.Table<Track> Tracks
		{
			get
			{
				return this.GetTable<Track>();
			}
		}
		
		public System.Data.Linq.Table<Trackpoint> Trackpoints
		{
			get
			{
				return this.GetTable<Trackpoint>();
			}
		}
		
		public System.Data.Linq.Table<Trainer> Trainers
		{
			get
			{
				return this.GetTable<Trainer>();
			}
		}
		
		public System.Data.Linq.Table<TrainingPlan> TrainingPlans
		{
			get
			{
				return this.GetTable<TrainingPlan>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Workout> Workouts
		{
			get
			{
				return this.GetTable<Workout>();
			}
		}
	}
	
	[Table(Name="dbo.Activity")]
	public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ForeignSystemID;
		
		private System.Nullable<int> _AthleteID;
		
		private System.Nullable<int> _ShoeID;
		
		private System.Nullable<int> _TrainingPlanID;
		
		private System.Data.Linq.Binary _Version;
		
		private int _ActivityType;
		
		private int _ActivitySubtype;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _Start;
		
		private int _TotalTimeSeconds;
		
		private int _DistanceMeters;
		
		private int _MaximumSpeed;
		
		private int _AverageHeartRateBpm;
		
		private int _MaximumHeartRateBpm;
		
		private int _MinimumHeartRateBpm;
		
		private int _Workload;
		
		private int _Experience;
		
		private string _Weather;
		
		private int _Labels;
		
		private System.DateTime _LastChanged;
		
		private string _Intensity;
		
		private bool _Done;
		
		private string _Comments;
		
		private EntityRef<Athlete> _Athlete;
		
		private EntityRef<Shoe> _Shoe;
		
		private EntityRef<TrainingPlan> _TrainingPlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnForeignSystemIDChanging(string value);
    partial void OnForeignSystemIDChanged();
    partial void OnAthleteIDChanging(System.Nullable<int> value);
    partial void OnAthleteIDChanged();
    partial void OnShoeIDChanging(System.Nullable<int> value);
    partial void OnShoeIDChanged();
    partial void OnTrainingPlanIDChanging(System.Nullable<int> value);
    partial void OnTrainingPlanIDChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnActivityTypeChanging(int value);
    partial void OnActivityTypeChanged();
    partial void OnActivitySubtypeChanging(int value);
    partial void OnActivitySubtypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnTotalTimeSecondsChanging(int value);
    partial void OnTotalTimeSecondsChanged();
    partial void OnDistanceMetersChanging(int value);
    partial void OnDistanceMetersChanged();
    partial void OnMaximumSpeedChanging(int value);
    partial void OnMaximumSpeedChanged();
    partial void OnAverageHeartRateBpmChanging(int value);
    partial void OnAverageHeartRateBpmChanged();
    partial void OnMaximumHeartRateBpmChanging(int value);
    partial void OnMaximumHeartRateBpmChanged();
    partial void OnMinimumHeartRateBpmChanging(int value);
    partial void OnMinimumHeartRateBpmChanged();
    partial void OnWorkloadChanging(int value);
    partial void OnWorkloadChanged();
    partial void OnExperienceChanging(int value);
    partial void OnExperienceChanged();
    partial void OnWeatherChanging(string value);
    partial void OnWeatherChanged();
    partial void OnLabelsChanging(int value);
    partial void OnLabelsChanged();
    partial void OnLastChangedChanging(System.DateTime value);
    partial void OnLastChangedChanged();
    partial void OnIntensityChanging(string value);
    partial void OnIntensityChanged();
    partial void OnDoneChanging(bool value);
    partial void OnDoneChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public Activity()
		{
			this._Athlete = default(EntityRef<Athlete>);
			this._Shoe = default(EntityRef<Shoe>);
			this._TrainingPlan = default(EntityRef<TrainingPlan>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ForeignSystemID", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		internal string ForeignSystemID
		{
			get
			{
				return this._ForeignSystemID;
			}
			set
			{
				if ((this._ForeignSystemID != value))
				{
					this.OnForeignSystemIDChanging(value);
					this.SendPropertyChanging();
					this._ForeignSystemID = value;
					this.SendPropertyChanged("ForeignSystemID");
					this.OnForeignSystemIDChanged();
				}
			}
		}
		
		[Column(Storage="_AthleteID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		internal System.Nullable<int> AthleteID
		{
			get
			{
				return this._AthleteID;
			}
			set
			{
				if ((this._AthleteID != value))
				{
					if (this._Athlete.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthleteIDChanging(value);
					this.SendPropertyChanging();
					this._AthleteID = value;
					this.SendPropertyChanged("AthleteID");
					this.OnAthleteIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShoeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		internal System.Nullable<int> ShoeID
		{
			get
			{
				return this._ShoeID;
			}
			set
			{
				if ((this._ShoeID != value))
				{
					if (this._Shoe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShoeIDChanging(value);
					this.SendPropertyChanging();
					this._ShoeID = value;
					this.SendPropertyChanged("ShoeID");
					this.OnShoeIDChanged();
				}
			}
		}
		
		[Column(Storage="_TrainingPlanID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		internal System.Nullable<int> TrainingPlanID
		{
			get
			{
				return this._TrainingPlanID;
			}
			set
			{
				if ((this._TrainingPlanID != value))
				{
					if (this._TrainingPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingPlanIDChanging(value);
					this.SendPropertyChanging();
					this._TrainingPlanID = value;
					this.SendPropertyChanged("TrainingPlanID");
					this.OnTrainingPlanIDChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		internal System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_ActivityType", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ActivityType
		{
			get
			{
				return this._ActivityType;
			}
			set
			{
				if ((this._ActivityType != value))
				{
					this.OnActivityTypeChanging(value);
					this.SendPropertyChanging();
					this._ActivityType = value;
					this.SendPropertyChanged("ActivityType");
					this.OnActivityTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ActivitySubtype", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ActivitySubtype
		{
			get
			{
				return this._ActivitySubtype;
			}
			set
			{
				if ((this._ActivitySubtype != value))
				{
					this.OnActivitySubtypeChanging(value);
					this.SendPropertyChanging();
					this._ActivitySubtype = value;
					this.SendPropertyChanged("ActivitySubtype");
					this.OnActivitySubtypeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Start", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[Column(Storage="_TotalTimeSeconds", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TotalTimeSeconds
		{
			get
			{
				return this._TotalTimeSeconds;
			}
			set
			{
				if ((this._TotalTimeSeconds != value))
				{
					this.OnTotalTimeSecondsChanging(value);
					this.SendPropertyChanging();
					this._TotalTimeSeconds = value;
					this.SendPropertyChanged("TotalTimeSeconds");
					this.OnTotalTimeSecondsChanged();
				}
			}
		}
		
		[Column(Storage="_DistanceMeters", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int DistanceMeters
		{
			get
			{
				return this._DistanceMeters;
			}
			set
			{
				if ((this._DistanceMeters != value))
				{
					this.OnDistanceMetersChanging(value);
					this.SendPropertyChanging();
					this._DistanceMeters = value;
					this.SendPropertyChanged("DistanceMeters");
					this.OnDistanceMetersChanged();
				}
			}
		}
		
		[Column(Storage="_MaximumSpeed", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MaximumSpeed
		{
			get
			{
				return this._MaximumSpeed;
			}
			set
			{
				if ((this._MaximumSpeed != value))
				{
					this.OnMaximumSpeedChanging(value);
					this.SendPropertyChanging();
					this._MaximumSpeed = value;
					this.SendPropertyChanged("MaximumSpeed");
					this.OnMaximumSpeedChanged();
				}
			}
		}
		
		[Column(Storage="_AverageHeartRateBpm", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AverageHeartRateBpm
		{
			get
			{
				return this._AverageHeartRateBpm;
			}
			set
			{
				if ((this._AverageHeartRateBpm != value))
				{
					this.OnAverageHeartRateBpmChanging(value);
					this.SendPropertyChanging();
					this._AverageHeartRateBpm = value;
					this.SendPropertyChanged("AverageHeartRateBpm");
					this.OnAverageHeartRateBpmChanged();
				}
			}
		}
		
		[Column(Storage="_MaximumHeartRateBpm", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MaximumHeartRateBpm
		{
			get
			{
				return this._MaximumHeartRateBpm;
			}
			set
			{
				if ((this._MaximumHeartRateBpm != value))
				{
					this.OnMaximumHeartRateBpmChanging(value);
					this.SendPropertyChanging();
					this._MaximumHeartRateBpm = value;
					this.SendPropertyChanged("MaximumHeartRateBpm");
					this.OnMaximumHeartRateBpmChanged();
				}
			}
		}
		
		[Column(Storage="_MinimumHeartRateBpm", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MinimumHeartRateBpm
		{
			get
			{
				return this._MinimumHeartRateBpm;
			}
			set
			{
				if ((this._MinimumHeartRateBpm != value))
				{
					this.OnMinimumHeartRateBpmChanging(value);
					this.SendPropertyChanging();
					this._MinimumHeartRateBpm = value;
					this.SendPropertyChanged("MinimumHeartRateBpm");
					this.OnMinimumHeartRateBpmChanged();
				}
			}
		}
		
		[Column(Storage="_Workload", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Workload
		{
			get
			{
				return this._Workload;
			}
			set
			{
				if ((this._Workload != value))
				{
					this.OnWorkloadChanging(value);
					this.SendPropertyChanging();
					this._Workload = value;
					this.SendPropertyChanged("Workload");
					this.OnWorkloadChanged();
				}
			}
		}
		
		[Column(Storage="_Experience", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Experience
		{
			get
			{
				return this._Experience;
			}
			set
			{
				if ((this._Experience != value))
				{
					this.OnExperienceChanging(value);
					this.SendPropertyChanging();
					this._Experience = value;
					this.SendPropertyChanged("Experience");
					this.OnExperienceChanged();
				}
			}
		}
		
		[Column(Storage="_Weather", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Weather
		{
			get
			{
				return this._Weather;
			}
			set
			{
				if ((this._Weather != value))
				{
					this.OnWeatherChanging(value);
					this.SendPropertyChanging();
					this._Weather = value;
					this.SendPropertyChanged("Weather");
					this.OnWeatherChanged();
				}
			}
		}
		
		[Column(Storage="_Labels", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Labels
		{
			get
			{
				return this._Labels;
			}
			set
			{
				if ((this._Labels != value))
				{
					this.OnLabelsChanging(value);
					this.SendPropertyChanging();
					this._Labels = value;
					this.SendPropertyChanged("Labels");
					this.OnLabelsChanged();
				}
			}
		}
		
		[Column(Storage="_LastChanged", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastChanged
		{
			get
			{
				return this._LastChanged;
			}
			set
			{
				if ((this._LastChanged != value))
				{
					this.OnLastChangedChanging(value);
					this.SendPropertyChanging();
					this._LastChanged = value;
					this.SendPropertyChanged("LastChanged");
					this.OnLastChangedChanged();
				}
			}
		}
		
		[Column(Storage="_Intensity", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Intensity
		{
			get
			{
				return this._Intensity;
			}
			set
			{
				if ((this._Intensity != value))
				{
					this.OnIntensityChanging(value);
					this.SendPropertyChanging();
					this._Intensity = value;
					this.SendPropertyChanged("Intensity");
					this.OnIntensityChanged();
				}
			}
		}
		
		[Column(Storage="_Done", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Done
		{
			get
			{
				return this._Done;
			}
			set
			{
				if ((this._Done != value))
				{
					this.OnDoneChanging(value);
					this.SendPropertyChanging();
					this._Done = value;
					this.SendPropertyChanged("Done");
					this.OnDoneChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Association(Name="Athlete_Activity", Storage="_Athlete", ThisKey="AthleteID", OtherKey="ID", IsForeignKey=true)]
		public Athlete Athlete
		{
			get
			{
				return this._Athlete.Entity;
			}
			set
			{
				if ((this._Athlete.Entity != value))
				{
					this.SendPropertyChanging();
					this._Athlete.Entity = value;
					this.SendPropertyChanged("Athlete");
				}
			}
		}
		
		[Association(Name="Shoe_Activity", Storage="_Shoe", ThisKey="ShoeID", OtherKey="ID", IsForeignKey=true)]
		public Shoe Shoe
		{
			get
			{
				return this._Shoe.Entity;
			}
			set
			{
				if ((this._Shoe.Entity != value))
				{
					this.SendPropertyChanging();
					this._Shoe.Entity = value;
					this.SendPropertyChanged("Shoe");
				}
			}
		}
		
		[Association(Name="TrainingPlan_Activity", Storage="_TrainingPlan", ThisKey="TrainingPlanID", OtherKey="ID", IsForeignKey=true)]
		public TrainingPlan TrainingPlan
		{
			get
			{
				return this._TrainingPlan.Entity;
			}
			set
			{
				if ((this._TrainingPlan.Entity != value))
				{
					this.SendPropertyChanging();
					this._TrainingPlan.Entity = value;
					this.SendPropertyChanged("TrainingPlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Athlete")]
	public partial class Athlete : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _PreferenceID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private System.Data.Linq.Binary _Version;
		
		private System.Nullable<int> _Weight;
		
		private System.Nullable<int> _Height;
		
		private System.Nullable<int> _Waist;
		
		private System.Nullable<int> _Thigh;
		
		private System.Nullable<int> _Arm;
		
		private System.Nullable<int> _RestingHeartRate;
		
		private System.Nullable<int> _MaximumHeartRate;
		
		private System.Nullable<int> _ThresholdHeartRate;
		
		private EntityRef<Preference> _Preference;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnPreferenceIDChanging(System.Nullable<int> value);
    partial void OnPreferenceIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnWeightChanging(System.Nullable<int> value);
    partial void OnWeightChanged();
    partial void OnHeightChanging(System.Nullable<int> value);
    partial void OnHeightChanged();
    partial void OnWaistChanging(System.Nullable<int> value);
    partial void OnWaistChanged();
    partial void OnThighChanging(System.Nullable<int> value);
    partial void OnThighChanged();
    partial void OnArmChanging(System.Nullable<int> value);
    partial void OnArmChanged();
    partial void OnRestingHeartRateChanging(System.Nullable<int> value);
    partial void OnRestingHeartRateChanged();
    partial void OnMaximumHeartRateChanging(System.Nullable<int> value);
    partial void OnMaximumHeartRateChanged();
    partial void OnThresholdHeartRateChanging(System.Nullable<int> value);
    partial void OnThresholdHeartRateChanged();
    #endregion
		
		public Athlete()
		{
			this._Preference = default(EntityRef<Preference>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		internal System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_PreferenceID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		internal System.Nullable<int> PreferenceID
		{
			get
			{
				return this._PreferenceID;
			}
			set
			{
				if ((this._PreferenceID != value))
				{
					if (this._Preference.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreferenceIDChanging(value);
					this.SendPropertyChanging();
					this._PreferenceID = value;
					this.SendPropertyChanged("PreferenceID");
					this.OnPreferenceIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_DateOfBirth", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		internal System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Column(Storage="_Waist", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Waist
		{
			get
			{
				return this._Waist;
			}
			set
			{
				if ((this._Waist != value))
				{
					this.OnWaistChanging(value);
					this.SendPropertyChanging();
					this._Waist = value;
					this.SendPropertyChanged("Waist");
					this.OnWaistChanged();
				}
			}
		}
		
		[Column(Storage="_Thigh", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Thigh
		{
			get
			{
				return this._Thigh;
			}
			set
			{
				if ((this._Thigh != value))
				{
					this.OnThighChanging(value);
					this.SendPropertyChanging();
					this._Thigh = value;
					this.SendPropertyChanged("Thigh");
					this.OnThighChanged();
				}
			}
		}
		
		[Column(Storage="_Arm", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Arm
		{
			get
			{
				return this._Arm;
			}
			set
			{
				if ((this._Arm != value))
				{
					this.OnArmChanging(value);
					this.SendPropertyChanging();
					this._Arm = value;
					this.SendPropertyChanged("Arm");
					this.OnArmChanged();
				}
			}
		}
		
		[Column(Storage="_RestingHeartRate", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RestingHeartRate
		{
			get
			{
				return this._RestingHeartRate;
			}
			set
			{
				if ((this._RestingHeartRate != value))
				{
					this.OnRestingHeartRateChanging(value);
					this.SendPropertyChanging();
					this._RestingHeartRate = value;
					this.SendPropertyChanged("RestingHeartRate");
					this.OnRestingHeartRateChanged();
				}
			}
		}
		
		[Column(Storage="_MaximumHeartRate", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MaximumHeartRate
		{
			get
			{
				return this._MaximumHeartRate;
			}
			set
			{
				if ((this._MaximumHeartRate != value))
				{
					this.OnMaximumHeartRateChanging(value);
					this.SendPropertyChanging();
					this._MaximumHeartRate = value;
					this.SendPropertyChanged("MaximumHeartRate");
					this.OnMaximumHeartRateChanged();
				}
			}
		}
		
		[Column(Storage="_ThresholdHeartRate", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ThresholdHeartRate
		{
			get
			{
				return this._ThresholdHeartRate;
			}
			set
			{
				if ((this._ThresholdHeartRate != value))
				{
					this.OnThresholdHeartRateChanging(value);
					this.SendPropertyChanging();
					this._ThresholdHeartRate = value;
					this.SendPropertyChanged("ThresholdHeartRate");
					this.OnThresholdHeartRateChanged();
				}
			}
		}
		
		[Association(Name="Preference_Athlete", Storage="_Preference", ThisKey="PreferenceID", OtherKey="ID", IsForeignKey=true)]
		public Preference Preference
		{
			get
			{
				return this._Preference.Entity;
			}
			set
			{
				if ((this._Preference.Entity != value))
				{
					this.SendPropertyChanging();
					this._Preference.Entity = value;
					this.SendPropertyChanged("Preference");
				}
			}
		}
		
		[Association(Name="User_Athlete", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				if ((this._User.Entity != value))
				{
					this.SendPropertyChanging();
					this._User.Entity = value;
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AthleteHealth")]
	public partial class AthleteHealth : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AthleteID;
		
		private System.DateTime _RegisteredAt;
		
		private int _Weight;
		
		private int _Waist;
		
		private int _Thigh;
		
		private int _Arm;
		
		private int _RestingHeartRate;
		
		private int _MaximumHeartRate;
		
		private int _ThresholdHeartRate;
		
		private EntityRef<Athlete> _Athlete;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAthleteIDChanging(int value);
    partial void OnAthleteIDChanged();
    partial void OnRegisteredAtChanging(System.DateTime value);
    partial void OnRegisteredAtChanged();
    partial void OnWeightChanging(int value);
    partial void OnWeightChanged();
    partial void OnWaistChanging(int value);
    partial void OnWaistChanged();
    partial void OnThighChanging(int value);
    partial void OnThighChanged();
    partial void OnArmChanging(int value);
    partial void OnArmChanged();
    partial void OnRestingHeartRateChanging(int value);
    partial void OnRestingHeartRateChanged();
    partial void OnMaximumHeartRateChanging(int value);
    partial void OnMaximumHeartRateChanged();
    partial void OnThresholdHeartRateChanging(int value);
    partial void OnThresholdHeartRateChanged();
    #endregion
		
		public AthleteHealth()
		{
			this._Athlete = default(EntityRef<Athlete>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_AthleteID", DbType="Int NOT NULL")]
		internal int AthleteID
		{
			get
			{
				return this._AthleteID;
			}
			set
			{
				if ((this._AthleteID != value))
				{
					if (this._Athlete.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthleteIDChanging(value);
					this.SendPropertyChanging();
					this._AthleteID = value;
					this.SendPropertyChanged("AthleteID");
					this.OnAthleteIDChanged();
				}
			}
		}
		
		[Column(Storage="_RegisteredAt", DbType="DateTime NOT NULL")]
		public System.DateTime RegisteredAt
		{
			get
			{
				return this._RegisteredAt;
			}
			set
			{
				if ((this._RegisteredAt != value))
				{
					this.OnRegisteredAtChanging(value);
					this.SendPropertyChanging();
					this._RegisteredAt = value;
					this.SendPropertyChanged("RegisteredAt");
					this.OnRegisteredAtChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Int NOT NULL")]
		public int Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_Waist", DbType="Int NOT NULL")]
		public int Waist
		{
			get
			{
				return this._Waist;
			}
			set
			{
				if ((this._Waist != value))
				{
					this.OnWaistChanging(value);
					this.SendPropertyChanging();
					this._Waist = value;
					this.SendPropertyChanged("Waist");
					this.OnWaistChanged();
				}
			}
		}
		
		[Column(Storage="_Thigh", DbType="Int NOT NULL")]
		public int Thigh
		{
			get
			{
				return this._Thigh;
			}
			set
			{
				if ((this._Thigh != value))
				{
					this.OnThighChanging(value);
					this.SendPropertyChanging();
					this._Thigh = value;
					this.SendPropertyChanged("Thigh");
					this.OnThighChanged();
				}
			}
		}
		
		[Column(Storage="_Arm", DbType="Int NOT NULL")]
		public int Arm
		{
			get
			{
				return this._Arm;
			}
			set
			{
				if ((this._Arm != value))
				{
					this.OnArmChanging(value);
					this.SendPropertyChanging();
					this._Arm = value;
					this.SendPropertyChanged("Arm");
					this.OnArmChanged();
				}
			}
		}
		
		[Column(Storage="_RestingHeartRate", DbType="Int NOT NULL")]
		public int RestingHeartRate
		{
			get
			{
				return this._RestingHeartRate;
			}
			set
			{
				if ((this._RestingHeartRate != value))
				{
					this.OnRestingHeartRateChanging(value);
					this.SendPropertyChanging();
					this._RestingHeartRate = value;
					this.SendPropertyChanged("RestingHeartRate");
					this.OnRestingHeartRateChanged();
				}
			}
		}
		
		[Column(Storage="_MaximumHeartRate", DbType="Int NOT NULL")]
		public int MaximumHeartRate
		{
			get
			{
				return this._MaximumHeartRate;
			}
			set
			{
				if ((this._MaximumHeartRate != value))
				{
					this.OnMaximumHeartRateChanging(value);
					this.SendPropertyChanging();
					this._MaximumHeartRate = value;
					this.SendPropertyChanged("MaximumHeartRate");
					this.OnMaximumHeartRateChanged();
				}
			}
		}
		
		[Column(Storage="_ThresholdHeartRate", DbType="Int NOT NULL")]
		public int ThresholdHeartRate
		{
			get
			{
				return this._ThresholdHeartRate;
			}
			set
			{
				if ((this._ThresholdHeartRate != value))
				{
					this.OnThresholdHeartRateChanging(value);
					this.SendPropertyChanging();
					this._ThresholdHeartRate = value;
					this.SendPropertyChanged("ThresholdHeartRate");
					this.OnThresholdHeartRateChanged();
				}
			}
		}
		
		[Association(Name="Athlete_AthleteHealth", Storage="_Athlete", ThisKey="AthleteID", OtherKey="ID", IsForeignKey=true)]
		public Athlete Athlete
		{
			get
			{
				return this._Athlete.Entity;
			}
			set
			{
				if ((this._Athlete.Entity != value))
				{
					this.SendPropertyChanging();
					this._Athlete.Entity = value;
					this.SendPropertyChanged("Athlete");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Goal")]
	public partial class Goal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AthleteID;
		
		private int _Time;
		
		private int _Distance;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<TrainingPlan> _TrainingPlans;
		
		private EntityRef<Athlete> _Athlete;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAthleteIDChanging(int value);
    partial void OnAthleteIDChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnDistanceChanging(int value);
    partial void OnDistanceChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Goal()
		{
			this._TrainingPlans = default(EntityRef<TrainingPlan>);
			this._Athlete = default(EntityRef<Athlete>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_AthleteID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		internal int AthleteID
		{
			get
			{
				return this._AthleteID;
			}
			set
			{
				if ((this._AthleteID != value))
				{
					if (this._Athlete.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthleteIDChanging(value);
					this.SendPropertyChanging();
					this._AthleteID = value;
					this.SendPropertyChanged("AthleteID");
					this.OnAthleteIDChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Distance", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this.OnDistanceChanging(value);
					this.SendPropertyChanging();
					this._Distance = value;
					this.SendPropertyChanged("Distance");
					this.OnDistanceChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		internal System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Association(Name="Goal_TrainingPlan", Storage="_TrainingPlans", ThisKey="ID", OtherKey="GoalID", IsUnique=true, IsForeignKey=false)]
		public TrainingPlan TrainingPlans
		{
			get
			{
				return this._TrainingPlans.Entity;
			}
			set
			{
				TrainingPlan previousValue = this._TrainingPlans.Entity;
				if (((previousValue != value) 
							|| (this._TrainingPlans.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingPlans.Entity = null;
						previousValue.Goal = null;
					}
					this._TrainingPlans.Entity = value;
					if ((value != null))
					{
						value.Goal = this;
					}
					this.SendPropertyChanged("TrainingPlans");
				}
			}
		}
		
		[Association(Name="Athlete_Goal", Storage="_Athlete", ThisKey="AthleteID", OtherKey="ID", IsForeignKey=true)]
		public Athlete Athlete
		{
			get
			{
				return this._Athlete.Entity;
			}
			set
			{
				if ((this._Athlete.Entity != value))
				{
					this.SendPropertyChanging();
					this._Athlete.Entity = value;
					this.SendPropertyChanged("Athlete");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Lap")]
	public partial class Lap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ActivityID;
		
		private System.Data.Linq.Binary _Version;
		
		private int _TotalTimeSeconds;
		
		private int _DistanceMeters;
		
		private int _MaximumSpeed;
		
		private int _Calories;
		
		private int _AverageHeartRateBpm;
		
		private int _MaximumHeartRateBpm;
		
		private string _Intensity;
		
		private string _TriggerMethod;
		
		private EntityRef<Activity> _Activity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActivityIDChanging(int value);
    partial void OnActivityIDChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnTotalTimeSecondsChanging(int value);
    partial void OnTotalTimeSecondsChanged();
    partial void OnDistanceMetersChanging(int value);
    partial void OnDistanceMetersChanged();
    partial void OnMaximumSpeedChanging(int value);
    partial void OnMaximumSpeedChanged();
    partial void OnCaloriesChanging(int value);
    partial void OnCaloriesChanged();
    partial void OnAverageHeartRateBpmChanging(int value);
    partial void OnAverageHeartRateBpmChanged();
    partial void OnMaximumHeartRateBpmChanging(int value);
    partial void OnMaximumHeartRateBpmChanged();
    partial void OnIntensityChanging(string value);
    partial void OnIntensityChanged();
    partial void OnTriggerMethodChanging(string value);
    partial void OnTriggerMethodChanged();
    #endregion
		
		public Lap()
		{
			this._Activity = default(EntityRef<Activity>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		internal int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		internal System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_TotalTimeSeconds", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TotalTimeSeconds
		{
			get
			{
				return this._TotalTimeSeconds;
			}
			set
			{
				if ((this._TotalTimeSeconds != value))
				{
					this.OnTotalTimeSecondsChanging(value);
					this.SendPropertyChanging();
					this._TotalTimeSeconds = value;
					this.SendPropertyChanged("TotalTimeSeconds");
					this.OnTotalTimeSecondsChanged();
				}
			}
		}
		
		[Column(Storage="_DistanceMeters", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int DistanceMeters
		{
			get
			{
				return this._DistanceMeters;
			}
			set
			{
				if ((this._DistanceMeters != value))
				{
					this.OnDistanceMetersChanging(value);
					this.SendPropertyChanging();
					this._DistanceMeters = value;
					this.SendPropertyChanged("DistanceMeters");
					this.OnDistanceMetersChanged();
				}
			}
		}
		
		[Column(Storage="_MaximumSpeed", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MaximumSpeed
		{
			get
			{
				return this._MaximumSpeed;
			}
			set
			{
				if ((this._MaximumSpeed != value))
				{
					this.OnMaximumSpeedChanging(value);
					this.SendPropertyChanging();
					this._MaximumSpeed = value;
					this.SendPropertyChanged("MaximumSpeed");
					this.OnMaximumSpeedChanged();
				}
			}
		}
		
		[Column(Storage="_Calories", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Calories
		{
			get
			{
				return this._Calories;
			}
			set
			{
				if ((this._Calories != value))
				{
					this.OnCaloriesChanging(value);
					this.SendPropertyChanging();
					this._Calories = value;
					this.SendPropertyChanged("Calories");
					this.OnCaloriesChanged();
				}
			}
		}
		
		[Column(Storage="_AverageHeartRateBpm", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AverageHeartRateBpm
		{
			get
			{
				return this._AverageHeartRateBpm;
			}
			set
			{
				if ((this._AverageHeartRateBpm != value))
				{
					this.OnAverageHeartRateBpmChanging(value);
					this.SendPropertyChanging();
					this._AverageHeartRateBpm = value;
					this.SendPropertyChanged("AverageHeartRateBpm");
					this.OnAverageHeartRateBpmChanged();
				}
			}
		}
		
		[Column(Storage="_MaximumHeartRateBpm", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MaximumHeartRateBpm
		{
			get
			{
				return this._MaximumHeartRateBpm;
			}
			set
			{
				if ((this._MaximumHeartRateBpm != value))
				{
					this.OnMaximumHeartRateBpmChanging(value);
					this.SendPropertyChanging();
					this._MaximumHeartRateBpm = value;
					this.SendPropertyChanged("MaximumHeartRateBpm");
					this.OnMaximumHeartRateBpmChanged();
				}
			}
		}
		
		[Column(Storage="_Intensity", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Intensity
		{
			get
			{
				return this._Intensity;
			}
			set
			{
				if ((this._Intensity != value))
				{
					this.OnIntensityChanging(value);
					this.SendPropertyChanging();
					this._Intensity = value;
					this.SendPropertyChanged("Intensity");
					this.OnIntensityChanged();
				}
			}
		}
		
		[Column(Storage="_TriggerMethod", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string TriggerMethod
		{
			get
			{
				return this._TriggerMethod;
			}
			set
			{
				if ((this._TriggerMethod != value))
				{
					this.OnTriggerMethodChanging(value);
					this.SendPropertyChanging();
					this._TriggerMethod = value;
					this.SendPropertyChanged("TriggerMethod");
					this.OnTriggerMethodChanged();
				}
			}
		}
		
		[Association(Name="Activity_Lap", Storage="_Activity", ThisKey="ActivityID", OtherKey="ID", IsForeignKey=true)]
		public Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				if ((this._Activity.Entity != value))
				{
					this.SendPropertyChanging();
					this._Activity.Entity = value;
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Preference")]
	public partial class Preference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _PreferedShoeID;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Shoe> _Shoe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPreferedShoeIDChanging(System.Nullable<int> value);
    partial void OnPreferedShoeIDChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Preference()
		{
			this._Shoe = default(EntityRef<Shoe>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PreferedShoeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		internal System.Nullable<int> PreferedShoeID
		{
			get
			{
				return this._PreferedShoeID;
			}
			set
			{
				if ((this._PreferedShoeID != value))
				{
					if (this._Shoe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreferedShoeIDChanging(value);
					this.SendPropertyChanging();
					this._PreferedShoeID = value;
					this.SendPropertyChanged("PreferedShoeID");
					this.OnPreferedShoeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		internal System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Association(Name="Shoe_Preference", Storage="_Shoe", ThisKey="PreferedShoeID", OtherKey="ID", IsForeignKey=true)]
		public Shoe Shoe
		{
			get
			{
				return this._Shoe.Entity;
			}
			set
			{
				if ((this._Shoe.Entity != value))
				{
					this.SendPropertyChanging();
					this._Shoe.Entity = value;
					this.SendPropertyChanged("Shoe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Run")]
	public partial class Run : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AthleteID;
		
		private System.Nullable<int> _ShoeID;
		
		private System.Nullable<int> _TrainingPlanID;
		
		private int _Time;
		
		private int _Distance;
		
		private System.DateTime _Start;
		
		private int _Labels;
		
		private System.DateTime _LastChanged;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Athlete> _Athlete;
		
		private EntityRef<Shoe> _Shoe;
		
		private EntityRef<TrainingPlan> _TrainingPlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAthleteIDChanging(int value);
    partial void OnAthleteIDChanged();
    partial void OnShoeIDChanging(System.Nullable<int> value);
    partial void OnShoeIDChanged();
    partial void OnTrainingPlanIDChanging(System.Nullable<int> value);
    partial void OnTrainingPlanIDChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnDistanceChanging(int value);
    partial void OnDistanceChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnLabelsChanging(int value);
    partial void OnLabelsChanged();
    partial void OnLastChangedChanging(System.DateTime value);
    partial void OnLastChangedChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Run()
		{
			this._Athlete = default(EntityRef<Athlete>);
			this._Shoe = default(EntityRef<Shoe>);
			this._TrainingPlan = default(EntityRef<TrainingPlan>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_AthleteID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		internal int AthleteID
		{
			get
			{
				return this._AthleteID;
			}
			set
			{
				if ((this._AthleteID != value))
				{
					if (this._Athlete.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthleteIDChanging(value);
					this.SendPropertyChanging();
					this._AthleteID = value;
					this.SendPropertyChanged("AthleteID");
					this.OnAthleteIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShoeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		internal System.Nullable<int> ShoeID
		{
			get
			{
				return this._ShoeID;
			}
			set
			{
				if ((this._ShoeID != value))
				{
					if (this._Shoe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShoeIDChanging(value);
					this.SendPropertyChanging();
					this._ShoeID = value;
					this.SendPropertyChanged("ShoeID");
					this.OnShoeIDChanged();
				}
			}
		}
		
		[Column(Storage="_TrainingPlanID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		internal System.Nullable<int> TrainingPlanID
		{
			get
			{
				return this._TrainingPlanID;
			}
			set
			{
				if ((this._TrainingPlanID != value))
				{
					if (this._TrainingPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingPlanIDChanging(value);
					this.SendPropertyChanging();
					this._TrainingPlanID = value;
					this.SendPropertyChanged("TrainingPlanID");
					this.OnTrainingPlanIDChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Distance", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this.OnDistanceChanging(value);
					this.SendPropertyChanging();
					this._Distance = value;
					this.SendPropertyChanged("Distance");
					this.OnDistanceChanged();
				}
			}
		}
		
		[Column(Storage="_Start", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[Column(Storage="_Labels", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Labels
		{
			get
			{
				return this._Labels;
			}
			set
			{
				if ((this._Labels != value))
				{
					this.OnLabelsChanging(value);
					this.SendPropertyChanging();
					this._Labels = value;
					this.SendPropertyChanged("Labels");
					this.OnLabelsChanged();
				}
			}
		}
		
		[Column(Storage="_LastChanged", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastChanged
		{
			get
			{
				return this._LastChanged;
			}
			set
			{
				if ((this._LastChanged != value))
				{
					this.OnLastChangedChanging(value);
					this.SendPropertyChanging();
					this._LastChanged = value;
					this.SendPropertyChanged("LastChanged");
					this.OnLastChangedChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		internal System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Association(Name="Athlete_Run", Storage="_Athlete", ThisKey="AthleteID", OtherKey="ID", IsForeignKey=true)]
		public Athlete Athlete
		{
			get
			{
				return this._Athlete.Entity;
			}
			set
			{
				if ((this._Athlete.Entity != value))
				{
					this.SendPropertyChanging();
					this._Athlete.Entity = value;
					this.SendPropertyChanged("Athlete");
				}
			}
		}
		
		[Association(Name="Shoe_Run", Storage="_Shoe", ThisKey="ShoeID", OtherKey="ID", IsForeignKey=true)]
		public Shoe Shoe
		{
			get
			{
				return this._Shoe.Entity;
			}
			set
			{
				if ((this._Shoe.Entity != value))
				{
					this.SendPropertyChanging();
					this._Shoe.Entity = value;
					this.SendPropertyChanged("Shoe");
				}
			}
		}
		
		[Association(Name="TrainingPlan_Run", Storage="_TrainingPlan", ThisKey="TrainingPlanID", OtherKey="ID", IsForeignKey=true)]
		public TrainingPlan TrainingPlan
		{
			get
			{
				return this._TrainingPlan.Entity;
			}
			set
			{
				if ((this._TrainingPlan.Entity != value))
				{
					this.SendPropertyChanging();
					this._TrainingPlan.Entity = value;
					this.SendPropertyChanged("TrainingPlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Shoe")]
	public partial class Shoe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AthleteID;
		
		private string _Brand;
		
		private int _Durability;
		
		private int _OtherUsage;
		
		private bool _Active;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Athlete> _Athlete;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAthleteIDChanging(int value);
    partial void OnAthleteIDChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnDurabilityChanging(int value);
    partial void OnDurabilityChanged();
    partial void OnOtherUsageChanging(int value);
    partial void OnOtherUsageChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Shoe()
		{
			this._Athlete = default(EntityRef<Athlete>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_AthleteID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		internal int AthleteID
		{
			get
			{
				return this._AthleteID;
			}
			set
			{
				if ((this._AthleteID != value))
				{
					if (this._Athlete.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthleteIDChanging(value);
					this.SendPropertyChanging();
					this._AthleteID = value;
					this.SendPropertyChanged("AthleteID");
					this.OnAthleteIDChanged();
				}
			}
		}
		
		[Column(Storage="_Brand", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[Column(Storage="_Durability", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Durability
		{
			get
			{
				return this._Durability;
			}
			set
			{
				if ((this._Durability != value))
				{
					this.OnDurabilityChanging(value);
					this.SendPropertyChanging();
					this._Durability = value;
					this.SendPropertyChanged("Durability");
					this.OnDurabilityChanged();
				}
			}
		}
		
		[Column(Storage="_OtherUsage", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OtherUsage
		{
			get
			{
				return this._OtherUsage;
			}
			set
			{
				if ((this._OtherUsage != value))
				{
					this.OnOtherUsageChanging(value);
					this.SendPropertyChanging();
					this._OtherUsage = value;
					this.SendPropertyChanged("OtherUsage");
					this.OnOtherUsageChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		internal System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Association(Name="Athlete_Shoe", Storage="_Athlete", ThisKey="AthleteID", OtherKey="ID", IsForeignKey=true)]
		public Athlete Athlete
		{
			get
			{
				return this._Athlete.Entity;
			}
			set
			{
				if ((this._Athlete.Entity != value))
				{
					this.SendPropertyChanging();
					this._Athlete.Entity = value;
					this.SendPropertyChanged("Athlete");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Track")]
	public partial class Track : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _LapID;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Lap> _Lap;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLapIDChanging(int value);
    partial void OnLapIDChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Track()
		{
			this._Lap = default(EntityRef<Lap>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_LapID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		internal int LapID
		{
			get
			{
				return this._LapID;
			}
			set
			{
				if ((this._LapID != value))
				{
					if (this._Lap.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLapIDChanging(value);
					this.SendPropertyChanging();
					this._LapID = value;
					this.SendPropertyChanged("LapID");
					this.OnLapIDChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		internal System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Association(Name="Lap_Track", Storage="_Lap", ThisKey="LapID", OtherKey="ID", IsForeignKey=true)]
		public Lap Lap
		{
			get
			{
				return this._Lap.Entity;
			}
			set
			{
				if ((this._Lap.Entity != value))
				{
					this.SendPropertyChanging();
					this._Lap.Entity = value;
					this.SendPropertyChanged("Lap");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Trackpoint")]
	public partial class Trackpoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TrackID;
		
		private System.Data.Linq.Binary _Version;
		
		private System.DateTime _Time;
		
		private int _LatitudeDegrees;
		
		private int _LongitudeDegrees;
		
		private int _AltitudeMeters;
		
		private int _DistanceMeters;
		
		private int _HeartRateBpm;
		
		private string _SensorState;
		
		private EntityRef<Track> _Track;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTrackIDChanging(int value);
    partial void OnTrackIDChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnLatitudeDegreesChanging(int value);
    partial void OnLatitudeDegreesChanged();
    partial void OnLongitudeDegreesChanging(int value);
    partial void OnLongitudeDegreesChanged();
    partial void OnAltitudeMetersChanging(int value);
    partial void OnAltitudeMetersChanged();
    partial void OnDistanceMetersChanging(int value);
    partial void OnDistanceMetersChanged();
    partial void OnHeartRateBpmChanging(int value);
    partial void OnHeartRateBpmChanged();
    partial void OnSensorStateChanging(string value);
    partial void OnSensorStateChanged();
    #endregion
		
		public Trackpoint()
		{
			this._Track = default(EntityRef<Track>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_TrackID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		internal int TrackID
		{
			get
			{
				return this._TrackID;
			}
			set
			{
				if ((this._TrackID != value))
				{
					if (this._Track.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrackIDChanging(value);
					this.SendPropertyChanging();
					this._TrackID = value;
					this.SendPropertyChanged("TrackID");
					this.OnTrackIDChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		internal System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LatitudeDegrees", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LatitudeDegrees
		{
			get
			{
				return this._LatitudeDegrees;
			}
			set
			{
				if ((this._LatitudeDegrees != value))
				{
					this.OnLatitudeDegreesChanging(value);
					this.SendPropertyChanging();
					this._LatitudeDegrees = value;
					this.SendPropertyChanged("LatitudeDegrees");
					this.OnLatitudeDegreesChanged();
				}
			}
		}
		
		[Column(Storage="_LongitudeDegrees", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LongitudeDegrees
		{
			get
			{
				return this._LongitudeDegrees;
			}
			set
			{
				if ((this._LongitudeDegrees != value))
				{
					this.OnLongitudeDegreesChanging(value);
					this.SendPropertyChanging();
					this._LongitudeDegrees = value;
					this.SendPropertyChanged("LongitudeDegrees");
					this.OnLongitudeDegreesChanged();
				}
			}
		}
		
		[Column(Storage="_AltitudeMeters", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AltitudeMeters
		{
			get
			{
				return this._AltitudeMeters;
			}
			set
			{
				if ((this._AltitudeMeters != value))
				{
					this.OnAltitudeMetersChanging(value);
					this.SendPropertyChanging();
					this._AltitudeMeters = value;
					this.SendPropertyChanged("AltitudeMeters");
					this.OnAltitudeMetersChanged();
				}
			}
		}
		
		[Column(Storage="_DistanceMeters", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int DistanceMeters
		{
			get
			{
				return this._DistanceMeters;
			}
			set
			{
				if ((this._DistanceMeters != value))
				{
					this.OnDistanceMetersChanging(value);
					this.SendPropertyChanging();
					this._DistanceMeters = value;
					this.SendPropertyChanged("DistanceMeters");
					this.OnDistanceMetersChanged();
				}
			}
		}
		
		[Column(Storage="_HeartRateBpm", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int HeartRateBpm
		{
			get
			{
				return this._HeartRateBpm;
			}
			set
			{
				if ((this._HeartRateBpm != value))
				{
					this.OnHeartRateBpmChanging(value);
					this.SendPropertyChanging();
					this._HeartRateBpm = value;
					this.SendPropertyChanged("HeartRateBpm");
					this.OnHeartRateBpmChanged();
				}
			}
		}
		
		[Column(Storage="_SensorState", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string SensorState
		{
			get
			{
				return this._SensorState;
			}
			set
			{
				if ((this._SensorState != value))
				{
					this.OnSensorStateChanging(value);
					this.SendPropertyChanging();
					this._SensorState = value;
					this.SendPropertyChanged("SensorState");
					this.OnSensorStateChanged();
				}
			}
		}
		
		[Association(Name="Track_Trackpoint", Storage="_Track", ThisKey="TrackID", OtherKey="ID", IsForeignKey=true)]
		public Track Track
		{
			get
			{
				return this._Track.Entity;
			}
			set
			{
				if ((this._Track.Entity != value))
				{
					this.SendPropertyChanging();
					this._Track.Entity = value;
					this.SendPropertyChanged("Track");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Trainer")]
	public partial class Trainer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Data.Linq.Binary _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Trainer()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		internal System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TrainingPlan")]
	public partial class TrainingPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AthleteID;
		
		private int _GoalID;
		
		private int _Intensity;
		
		private int _Skill;
		
		private int _Workload;
		
		private System.DateTime _Start;
		
		private int _StartDistance;
		
		private int _PreferredWeekdays;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Athlete> _Athlete;
		
		private EntityRef<Goal> _Goal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAthleteIDChanging(int value);
    partial void OnAthleteIDChanged();
    partial void OnGoalIDChanging(int value);
    partial void OnGoalIDChanged();
    partial void OnIntensityChanging(int value);
    partial void OnIntensityChanged();
    partial void OnSkillChanging(int value);
    partial void OnSkillChanged();
    partial void OnWorkloadChanging(int value);
    partial void OnWorkloadChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnStartDistanceChanging(int value);
    partial void OnStartDistanceChanged();
    partial void OnPreferredWeekdaysChanging(int value);
    partial void OnPreferredWeekdaysChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public TrainingPlan()
		{
			this._Athlete = default(EntityRef<Athlete>);
			this._Goal = default(EntityRef<Goal>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_AthleteID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		internal int AthleteID
		{
			get
			{
				return this._AthleteID;
			}
			set
			{
				if ((this._AthleteID != value))
				{
					if (this._Athlete.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthleteIDChanging(value);
					this.SendPropertyChanging();
					this._AthleteID = value;
					this.SendPropertyChanged("AthleteID");
					this.OnAthleteIDChanged();
				}
			}
		}
		
		[Column(Storage="_GoalID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		internal int GoalID
		{
			get
			{
				return this._GoalID;
			}
			set
			{
				if ((this._GoalID != value))
				{
					if (this._Goal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoalIDChanging(value);
					this.SendPropertyChanging();
					this._GoalID = value;
					this.SendPropertyChanged("GoalID");
					this.OnGoalIDChanged();
				}
			}
		}
		
		[Column(Storage="_Intensity", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Intensity
		{
			get
			{
				return this._Intensity;
			}
			set
			{
				if ((this._Intensity != value))
				{
					this.OnIntensityChanging(value);
					this.SendPropertyChanging();
					this._Intensity = value;
					this.SendPropertyChanged("Intensity");
					this.OnIntensityChanged();
				}
			}
		}
		
		[Column(Storage="_Skill", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Skill
		{
			get
			{
				return this._Skill;
			}
			set
			{
				if ((this._Skill != value))
				{
					this.OnSkillChanging(value);
					this.SendPropertyChanging();
					this._Skill = value;
					this.SendPropertyChanged("Skill");
					this.OnSkillChanged();
				}
			}
		}
		
		[Column(Storage="_Workload", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Workload
		{
			get
			{
				return this._Workload;
			}
			set
			{
				if ((this._Workload != value))
				{
					this.OnWorkloadChanging(value);
					this.SendPropertyChanging();
					this._Workload = value;
					this.SendPropertyChanged("Workload");
					this.OnWorkloadChanged();
				}
			}
		}
		
		[Column(Storage="_Start", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[Column(Storage="_StartDistance", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int StartDistance
		{
			get
			{
				return this._StartDistance;
			}
			set
			{
				if ((this._StartDistance != value))
				{
					this.OnStartDistanceChanging(value);
					this.SendPropertyChanging();
					this._StartDistance = value;
					this.SendPropertyChanged("StartDistance");
					this.OnStartDistanceChanged();
				}
			}
		}
		
		[Column(Storage="_PreferredWeekdays", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PreferredWeekdays
		{
			get
			{
				return this._PreferredWeekdays;
			}
			set
			{
				if ((this._PreferredWeekdays != value))
				{
					this.OnPreferredWeekdaysChanging(value);
					this.SendPropertyChanging();
					this._PreferredWeekdays = value;
					this.SendPropertyChanged("PreferredWeekdays");
					this.OnPreferredWeekdaysChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		internal System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Association(Name="Athlete_TrainingPlan", Storage="_Athlete", ThisKey="AthleteID", OtherKey="ID", IsForeignKey=true)]
		public Athlete Athlete
		{
			get
			{
				return this._Athlete.Entity;
			}
			set
			{
				if ((this._Athlete.Entity != value))
				{
					this.SendPropertyChanging();
					this._Athlete.Entity = value;
					this.SendPropertyChanged("Athlete");
				}
			}
		}
		
		[Association(Name="Goal_TrainingPlan", Storage="_Goal", ThisKey="GoalID", OtherKey="ID", IsForeignKey=true)]
		public Goal Goal
		{
			get
			{
				return this._Goal.Entity;
			}
			set
			{
				Goal previousValue = this._Goal.Entity;
				if (((previousValue != value) 
							|| (this._Goal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Goal.Entity = null;
						previousValue.TrainingPlans = null;
					}
					this._Goal.Entity = value;
					if ((value != null))
					{
						value.TrainingPlans = this;
						this._GoalID = value.ID;
					}
					else
					{
						this._GoalID = default(int);
					}
					this.SendPropertyChanged("Goal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserName;
		
		private string _Password;
		
		private System.Data.Linq.Binary _Version;
		
		private string _Roles;
		
		private string _CustomerID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnRolesChanging(string value);
    partial void OnRolesChanged();
    partial void OnCustomerIDChanging(string value);
    partial void OnCustomerIDChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		internal System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_Roles", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string Roles
		{
			get
			{
				return this._Roles;
			}
			set
			{
				if ((this._Roles != value))
				{
					this.OnRolesChanging(value);
					this.SendPropertyChanging();
					this._Roles = value;
					this.SendPropertyChanged("Roles");
					this.OnRolesChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerID", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		internal string CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Workout")]
	public partial class Workout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AthleteID;
		
		private System.Data.Linq.Binary _Version;
		
		private System.Nullable<System.DateTime> _Start;
		
		private string _Description;
		
		private int _Distance;
		
		private int _WorkoutType;
		
		private EntityRef<Athlete> _Athlete;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAthleteIDChanging(System.Nullable<int> value);
    partial void OnAthleteIDChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnStartChanging(System.Nullable<System.DateTime> value);
    partial void OnStartChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDistanceChanging(int value);
    partial void OnDistanceChanged();
    partial void OnWorkoutTypeChanging(int value);
    partial void OnWorkoutTypeChanged();
    #endregion
		
		public Workout()
		{
			this._Athlete = default(EntityRef<Athlete>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_AthleteID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		internal System.Nullable<int> AthleteID
		{
			get
			{
				return this._AthleteID;
			}
			set
			{
				if ((this._AthleteID != value))
				{
					if (this._Athlete.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthleteIDChanging(value);
					this.SendPropertyChanging();
					this._AthleteID = value;
					this.SendPropertyChanged("AthleteID");
					this.OnAthleteIDChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		internal System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_Start", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Distance", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this.OnDistanceChanging(value);
					this.SendPropertyChanging();
					this._Distance = value;
					this.SendPropertyChanged("Distance");
					this.OnDistanceChanged();
				}
			}
		}
		
		[Column(Storage="_WorkoutType", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int WorkoutType
		{
			get
			{
				return this._WorkoutType;
			}
			set
			{
				if ((this._WorkoutType != value))
				{
					this.OnWorkoutTypeChanging(value);
					this.SendPropertyChanging();
					this._WorkoutType = value;
					this.SendPropertyChanged("WorkoutType");
					this.OnWorkoutTypeChanged();
				}
			}
		}
		
		[Association(Name="Athlete_Workout", Storage="_Athlete", ThisKey="AthleteID", OtherKey="ID", IsForeignKey=true)]
		public Athlete Athlete
		{
			get
			{
				return this._Athlete.Entity;
			}
			set
			{
				if ((this._Athlete.Entity != value))
				{
					this.SendPropertyChanging();
					this._Athlete.Entity = value;
					this.SendPropertyChanged("Athlete");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
